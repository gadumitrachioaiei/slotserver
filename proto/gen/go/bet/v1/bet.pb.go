// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: bet/v1/bet.proto

package bet

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SpinType int32

const (
	SpinType_SPIN_TYPE_UNSPECIFIED SpinType = 0
	SpinType_SPIN_TYPE_MAIN        SpinType = 1
	SpinType_SPIN_TYPE_FREE        SpinType = 2
)

// Enum value maps for SpinType.
var (
	SpinType_name = map[int32]string{
		0: "SPIN_TYPE_UNSPECIFIED",
		1: "SPIN_TYPE_MAIN",
		2: "SPIN_TYPE_FREE",
	}
	SpinType_value = map[string]int32{
		"SPIN_TYPE_UNSPECIFIED": 0,
		"SPIN_TYPE_MAIN":        1,
		"SPIN_TYPE_FREE":        2,
	}
)

func (x SpinType) Enum() *SpinType {
	p := new(SpinType)
	*p = x
	return p
}

func (x SpinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpinType) Descriptor() protoreflect.EnumDescriptor {
	return file_bet_v1_bet_proto_enumTypes[0].Descriptor()
}

func (SpinType) Type() protoreflect.EnumType {
	return &file_bet_v1_bet_proto_enumTypes[0]
}

func (x SpinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpinType.Descriptor instead.
func (SpinType) EnumDescriptor() ([]byte, []int) {
	return file_bet_v1_bet_proto_rawDescGZIP(), []int{0}
}

type CreateBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`      // user id
	Chips int32  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"` // how many chips the user has
	Bet   int32  `protobuf:"varint,3,opt,name=bet,proto3" json:"bet,omitempty"`     // how many chips the user bet
}

func (x *CreateBetRequest) Reset() {
	*x = CreateBetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bet_v1_bet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBetRequest) ProtoMessage() {}

func (x *CreateBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bet_v1_bet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBetRequest.ProtoReflect.Descriptor instead.
func (*CreateBetRequest) Descriptor() ([]byte, []int) {
	return file_bet_v1_bet_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBetRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CreateBetRequest) GetChips() int32 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *CreateBetRequest) GetBet() int32 {
	if x != nil {
		return x.Bet
	}
	return 0
}

type CreateBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwt   *CreateBetRequest  `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`      // the user bet
	Spins []*SpinDescription `protobuf:"bytes,2,rep,name=spins,proto3" json:"spins,omitempty"`  // the spins the bet triggered
	Win   int32              `protobuf:"varint,3,opt,name=win,proto3" json:"win,omitempty"`     // how much the user won
	Chips int32              `protobuf:"varint,4,opt,name=chips,proto3" json:"chips,omitempty"` // how many chips the user has after the bet
	Bet   int32              `protobuf:"varint,5,opt,name=bet,proto3" json:"bet,omitempty"`     // how many chips the user bet
}

func (x *CreateBetResponse) Reset() {
	*x = CreateBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bet_v1_bet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBetResponse) ProtoMessage() {}

func (x *CreateBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bet_v1_bet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBetResponse.ProtoReflect.Descriptor instead.
func (*CreateBetResponse) Descriptor() ([]byte, []int) {
	return file_bet_v1_bet_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBetResponse) GetJwt() *CreateBetRequest {
	if x != nil {
		return x.Jwt
	}
	return nil
}

func (x *CreateBetResponse) GetSpins() []*SpinDescription {
	if x != nil {
		return x.Spins
	}
	return nil
}

func (x *CreateBetResponse) GetWin() int32 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *CreateBetResponse) GetChips() int32 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *CreateBetResponse) GetBet() int32 {
	if x != nil {
		return x.Bet
	}
	return 0
}

type SpinDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     SpinType    `protobuf:"varint,1,opt,name=type,proto3,enum=bet.v1.SpinType" json:"type,omitempty"`
	Win      int32       `protobuf:"varint,2,opt,name=win,proto3" json:"win,omitempty"`                          // how much this spin won
	Lines    []*SpinLine `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`                       // stops of the spin
	PayLines []*PayLine  `protobuf:"bytes,4,rep,name=pay_lines,json=payLines,proto3" json:"pay_lines,omitempty"` // pay lines, if any
}

func (x *SpinDescription) Reset() {
	*x = SpinDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bet_v1_bet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinDescription) ProtoMessage() {}

func (x *SpinDescription) ProtoReflect() protoreflect.Message {
	mi := &file_bet_v1_bet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinDescription.ProtoReflect.Descriptor instead.
func (*SpinDescription) Descriptor() ([]byte, []int) {
	return file_bet_v1_bet_proto_rawDescGZIP(), []int{2}
}

func (x *SpinDescription) GetType() SpinType {
	if x != nil {
		return x.Type
	}
	return SpinType_SPIN_TYPE_UNSPECIFIED
}

func (x *SpinDescription) GetWin() int32 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *SpinDescription) GetLines() []*SpinLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *SpinDescription) GetPayLines() []*PayLine {
	if x != nil {
		return x.PayLines
	}
	return nil
}

type SpinLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *SpinLine) Reset() {
	*x = SpinLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bet_v1_bet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinLine) ProtoMessage() {}

func (x *SpinLine) ProtoReflect() protoreflect.Message {
	mi := &file_bet_v1_bet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinLine.ProtoReflect.Descriptor instead.
func (*SpinLine) Descriptor() ([]byte, []int) {
	return file_bet_v1_bet_proto_rawDescGZIP(), []int{3}
}

func (x *SpinLine) GetValue() []int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type PayLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *PayLine) Reset() {
	*x = PayLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bet_v1_bet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayLine) ProtoMessage() {}

func (x *PayLine) ProtoReflect() protoreflect.Message {
	mi := &file_bet_v1_bet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayLine.ProtoReflect.Descriptor instead.
func (*PayLine) Descriptor() ([]byte, []int) {
	return file_bet_v1_bet_proto_rawDescGZIP(), []int{4}
}

func (x *PayLine) GetValue() []int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_bet_v1_bet_proto protoreflect.FileDescriptor

var file_bet_v1_bet_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x62, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x62, 0x65, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03,
	0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x73, 0x70, 0x69, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62, 0x65,
	0x74, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x53, 0x70, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x26, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x08, 0x53, 0x70, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x4d, 0x0a, 0x08, 0x53, 0x70, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x50, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x10, 0x02, 0x32, 0x6a, 0x0a, 0x12, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x62, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x07, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x74, 0x3a, 0x01,
	0x2a, 0x42, 0xaa, 0x02, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x61, 0x64, 0x75, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x63, 0x68, 0x69, 0x6f, 0x61, 0x69,
	0x65, 0x69, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x65, 0x74, 0x2f, 0x76,
	0x31, 0x3b, 0x62, 0x65, 0x74, 0x92, 0x41, 0xe5, 0x01, 0x12, 0xba, 0x01, 0x0a, 0x0a, 0x53, 0x6c,
	0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x64, 0x75, 0x6d,
	0x69, 0x74, 0x72, 0x61, 0x63, 0x68, 0x69, 0x6f, 0x61, 0x69, 0x65, 0x69, 0x2f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x61, 0x62, 0x69, 0x2e, 0x61, 0x64,
	0x75, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x63, 0x68, 0x69, 0x6f, 0x61, 0x69, 0x65, 0x69, 0x40, 0x67,
	0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x47, 0x0a, 0x14, 0x42, 0x53, 0x44, 0x20,
	0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x64, 0x75, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x63, 0x68,
	0x69, 0x6f, 0x61, 0x69, 0x65, 0x69, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bet_v1_bet_proto_rawDescOnce sync.Once
	file_bet_v1_bet_proto_rawDescData = file_bet_v1_bet_proto_rawDesc
)

func file_bet_v1_bet_proto_rawDescGZIP() []byte {
	file_bet_v1_bet_proto_rawDescOnce.Do(func() {
		file_bet_v1_bet_proto_rawDescData = protoimpl.X.CompressGZIP(file_bet_v1_bet_proto_rawDescData)
	})
	return file_bet_v1_bet_proto_rawDescData
}

var file_bet_v1_bet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bet_v1_bet_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_bet_v1_bet_proto_goTypes = []interface{}{
	(SpinType)(0),             // 0: bet.v1.SpinType
	(*CreateBetRequest)(nil),  // 1: bet.v1.CreateBetRequest
	(*CreateBetResponse)(nil), // 2: bet.v1.CreateBetResponse
	(*SpinDescription)(nil),   // 3: bet.v1.SpinDescription
	(*SpinLine)(nil),          // 4: bet.v1.SpinLine
	(*PayLine)(nil),           // 5: bet.v1.PayLine
}
var file_bet_v1_bet_proto_depIdxs = []int32{
	1, // 0: bet.v1.CreateBetResponse.jwt:type_name -> bet.v1.CreateBetRequest
	3, // 1: bet.v1.CreateBetResponse.spins:type_name -> bet.v1.SpinDescription
	0, // 2: bet.v1.SpinDescription.type:type_name -> bet.v1.SpinType
	4, // 3: bet.v1.SpinDescription.lines:type_name -> bet.v1.SpinLine
	5, // 4: bet.v1.SpinDescription.pay_lines:type_name -> bet.v1.PayLine
	1, // 5: bet.v1.SlotMachineService.CreateBet:input_type -> bet.v1.CreateBetRequest
	2, // 6: bet.v1.SlotMachineService.CreateBet:output_type -> bet.v1.CreateBetResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_bet_v1_bet_proto_init() }
func file_bet_v1_bet_proto_init() {
	if File_bet_v1_bet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bet_v1_bet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bet_v1_bet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bet_v1_bet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bet_v1_bet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bet_v1_bet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bet_v1_bet_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bet_v1_bet_proto_goTypes,
		DependencyIndexes: file_bet_v1_bet_proto_depIdxs,
		EnumInfos:         file_bet_v1_bet_proto_enumTypes,
		MessageInfos:      file_bet_v1_bet_proto_msgTypes,
	}.Build()
	File_bet_v1_bet_proto = out.File
	file_bet_v1_bet_proto_rawDesc = nil
	file_bet_v1_bet_proto_goTypes = nil
	file_bet_v1_bet_proto_depIdxs = nil
}
